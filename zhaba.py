import asyncio
import datetime
import random
import re

from telethon.tl.types import Message

from .. import loader


@loader.tds
class ZhabaMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è @toadbot"""

    strings = {"name": "Zhaba"}

    async def client_ready(self, client, db):
        """ready"""
        self.client = client
        self.db = db
        self.su = db.get("Su", "su", {})
        self.me = await client.get_me()
        if "name" not in self.su:
            self.su.setdefault("name", self.me.first_name)
            self.su.setdefault("users", [self.me.id, 1124824021])
            self.db.set("Su", "su", self.su)
        self.ded = {
            "–∂–∞–±—É —Å —Ä–∞–±–æ—Ç—ã": "@toadbot –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            "–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å": "@toadbot –û—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±—É",
            "–º–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å": "@toadbot –ü–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±—É",
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
            "–∂–∞–±–∞ –≤ –¥–∞–Ω–∂–µ": "—Ä–µ–π–¥ —Å—Ç–∞—Ä—Ç",
            "–ú–æ–∂–Ω–æ –Ω–∞ –∞—Ä–µ–Ω—É!": "@toadbot –ù–∞ –∞—Ä–µ–Ω—É",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ç–∞–∫—É": "@toadbot –ù–∞ –∞—Ä–µ–Ω—É",
            "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å": "—Ä–∞–±–æ—Ç–∞ –∫—Ä—É–ø—å–µ",
            "–∑–æ–ª–æ—Ç–æ": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
            "–∫–≤": "–Ω–∞—á–∞—Ç—å –∫–ª–∞–Ω–æ–≤—É—é –≤–æ–π–Ω—É",
            "–Ω–∞–ø–∞–¥–∏": "–Ω–∞–ø–∞—Å—Ç—å –Ω–∞ –∫–ª–∞–Ω",
            "–∞—Ä–µ–Ω–∞": "–Ω–∞ –∞—Ä–µ–Ω—É",
            "—Ä–µ–∞–Ω–∏–º–∏—Ä—É–π": "—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É",
            "–∫–∞—Ä—Ç—É": "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É",
            "—Å–Ω–∞—Ä—è–≥–∞": "–º–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ",
            "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å": "–º–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
            "—Ç—É—Å–∞": "–∂–∞–±—É –Ω–∞ —Ç—É—Å—É",
            "—Ç—É—Å–∏": "–Ω–∞—á–∞—Ç—å —Ç—É—Å—É",
            "—Ä–µ–π–¥": "—Ä–µ–π–¥ —Å—Ç–∞—Ä—Ç",
            "—Ä–∞–±–æ—Ç–∞": "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            "–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç": "–≤—ã–±—Ä–∞—Ç—å —É—Å–∏–ª–∏—Ç–µ–ª—å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç",
            "–ø—Ä–µ–¥–µ–ª": "–≤—ã–±—Ä–∞—Ç—å —É—Å–∏–ª–∏—Ç–µ–ª—å –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ",
            "–ª–µ–¥–µ–Ω–µ—Ü": "–æ—Ç–¥–∞—Ç—å –ª–µ–¥–µ–Ω–µ—Ü",
            "–∫—É–ª–æ–Ω": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫—É–ª–æ–Ω –±—Ä–∞—Ç–≤—ã",
            "–ª–∏–¥–µ—Ä–∫—É": "–ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞–Ω",
            "–±—É–∫–∞—Ö": "–±—É–∫–∞—à–∫–∏",
            "–∞–ø—Ç–µ–∫": "–∞–ø—Ç–µ—á–∫–∏",
            "–ª–µ–¥–∏–∫": "–ª–µ–¥–µ–Ω—Ü—ã",
            "–ë–ª–∏–∂–Ω–∏–π –±–æ–π: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫–ª—é–≤ —Ü–∞–ø–ª–∏",
            "–î–∞–ª—å–Ω–∏–π –±–æ–π: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—É–∫–∞—à–∫–æ–º–µ—Ç",
            "–ù–∞–≥–æ–ª–æ–≤–Ω–∏–∫: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥–æ–ª–æ–≤–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
            "–ù–∞–≥—Ä—É–¥–Ω–∏–∫: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–¥–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
            "–ù–∞–ª–∞–ø–Ω–∏–∫–∏: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–ª–∞–ø–Ω–∏–∫–∏ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
            "–ë–∞–Ω–¥–∞: –ü—É—Å—Ç–æ": "–≤–∑—è—Ç—å –∂–∞–±—É",
            "–ü–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞": "@toadbot –ü–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞",
            "–ë—Ä–∞–∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ": "@toadbot –ë—Ä–∞–∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ",
            "–ó–∞–±—Ä–∞—Ç—å –∂–∞–±–µ–Ω–∫–∞": "@toadbot –ó–∞–±—Ä–∞—Ç—å –∂–∞–±–µ–Ω–∫–∞",
            "–í –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥!": "@toadbot –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –≤ –¥–µ—Ç—Å–∞–¥",
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ö–∞—á": "@toadbot –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ö–∞—á",
        }

    async def err(self, chat, cmn):
        """—Ä–∞–±–æ—Ç–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –∂–∞–±–∞–±–æ—Ç–∞"""
        try:
            async with self.client.conversation(chat, exclusive=False) as conv:
                await conv.send_message(cmn)
                global RSP
                RSP = await conv.get_response()
                await conv.cancel_all()
        except Exception:
            pass

    async def npn(self, chat, msg):
        cmn = self.ded[msg]
        await self.err(chat, cmn)
        if not RSP:
            return
        if "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ" in RSP.text or "–í–∞—à–∞ –∂–∞–±–∞ –Ω–∞ —Ç—É—Å–µ" in RSP.text:
            return
        await asyncio.sleep(random.randint(3, 33))
        if "–í–∞—à–∞ –∂–∞–±–∞ –≤ –ø—Ä–µ–¥—Å–º–µ—Ä—Ç–Ω–æ–º" in RSP.text or "–î–ª—è —É—á–∞—Å—Ç–∏—è" in RSP.text:
            await RSP.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
        elif "–í–∞—à–∞ –∂–∞–±–∞ –Ω–∞" in RSP.text:
            await RSP.respond("–∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")
        await asyncio.sleep(random.randint(3, 33))
        await self.client.send_message(chat, cmn)

    async def scmd(self, m):
        """–∞–≤—Ç–æ–∂–∞–±–∞, '.s a ID' —á–∞—Ç , '.s a +' –≤—Å–µ –∂–∞–±—ã.
        –∞–≤—Ç–æ–∞—Ä–µ–Ω–∞ (—Å –∞–≤—Ç–æ–∂–∞–±–æ–π), '.s b ID' —á–∞—Ç, '.s b +' –≤—Å–µ –∂–∞–±—ã."""
        if len(m.text) < 3:
            txt = "<b>üëëStatus</b>\nAutozhaba:"
            if "auto" in self.su:
                txt += " <b>‚ú≥Ô∏èactivated</b>"
            elif "chats" in self.su:
                txt += f"<b> in {self.su['chats']}</b>"
            else:
                txt += " <b>‚õîÔ∏èdeactivated</b>"
            txt += "\nAutoarena:"
            if "buto" in self.su:
                txt += " <b>‚ú≥Ô∏èactivated</b>"
            elif "butos" in self.su:
                txt += f"<b> in {self.su['butos']}</b>"
            else:
                txt += " <b>‚õîÔ∏èdeactivated</b>"
            txt += f"\nJob:\n  üëØ‚Äç‚ôÄÔ∏è–ö—Ä—É–ø—å–µ:"
            if "cs" in self.su:
                txt += " <b>–≤–µ–∑–¥–µ</b>"
            elif "css" in self.su:
                txt += f" <b>in {self.su['css']}</b>"
            else:
                txt += " <b>‚õîÔ∏èdeactivated</b>"
            txt += "\n  üë©üèæ‚Äçüç≥–°—Ç–æ–ª–æ–≤–∫–∞:"
            if "ss" in self.su:
                txt += " <b>–≤–µ–∑–¥–µ</b>"
            elif "sss" in self.su:
                txt += f" <b>in {self.su['sss']}</b>"
            else:
                txt += " <b>‚õîÔ∏èdeactivated</b>"
            txt += "\n  üë®üèø‚Äçüè≠–ì—Ä–∞–±–∏—Ç–µ–ª—å:"
            if "es" in self.su:
                txt += " <b>–≤–µ–∑–¥–µ</b>"
            elif "ess" in self.su:
                txt += f" <b>in {self.su['ess']}</b>"
            else:
                txt += " <b>‚õîÔ∏èdeactivated</b>"
            txt += f"\nNick: <b>{self.su['name']}</b>"
            txt += "\nUsers: <code>.su</code>"
            return await m.edit(txt)
        if m.text.split(" ", 2)[1] == "a":
            txt = "<b>üëÑ–ê–≤—Ç–æ–∂–∞–±–∞:</b>"
            i = "auto"
            n = "chats"
        elif m.text.split(" ", 2)[1] == "b":
            txt = "<b>üòà–ê—Ä–µ–Ω–∞:</b>"
            i = "buto"
            n = "butos"
        elif m.text.split(" ", 2)[1] == "d":
            txt = "<b>üëØ‚Äç‚ôÄÔ∏è–ö—Ä—É–ø—å–µ:</b>"
            i = "cs"
            n = "css"
        elif m.text.split(" ", 2)[1] == "d":
            txt = "<b>üë©üèæ‚Äçüç≥–°—Ç–æ–ª–æ–≤–∫–∞:</b>"
            i = "ss"
            n = "sss"
        elif m.text.split(" ", 2)[1] == "e":
            txt = "<b>üë®üèø‚Äçüè≠–ì—Ä–∞–±–∏—Ç–µ–ª—å:</b>"
            i = "es"
            n = "ess"
        elif m.text.split(" ", 2)[1] == "f":
            txt = "<b>üêü–ü–æ–∫–æ—Ä–º–∏—Ç—å:</b>"
            i = "fs"
            n = "fss"
        elif m.text.split(" ", 2)[1] == "g":
            txt = "<b>üê°–û—Ç–∫–æ—Ä–º–∏—Ç—å:</b>"
            i = "gs"
            n = "gss"
        else:
            return
        if "+" in m.text:
            self.su.setdefault(i, {})
            if n in self.su:
                self.su.pop(n)
            txt += "<b> –¥–ª—è –≤—Å–µ—Ö –∂–∞–±</b>"
            return await m.edit(txt)
        msg = m.chat_id if len(m.text) < 9 else int(m.text.split(" ", 2)[2])
        if "-" not in str(msg):
            return await m.edit(
                "–∏–¥ —á–∞—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '-', –Ω–∞–ø–∏—à–∏ <code>—É–∑–Ω–∞—Ç—å –∏–¥</code>"
            )
        if i in self.su:
            self.su.pop(i)
            txt += "<b> –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>"
        elif n in self.su and msg in self.su[n]:
            self.su[n].remove(msg)
            txt += f"<b> —É–¥–∞–ª–µ–Ω —á–∞—Ç</b> {msg}"
            if self.su[n] == []:
                self.su.pop(n)
                txt += "\n\n<b>–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>"
            return await m.edit(txt)
        elif n in self.su and msg not in self.su[n]:
            txt += f"<b> –¥–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç</b> {msg}"
            self.su[n].append(msg)
        else:
            self.su.setdefault(n, [msg])
            txt += f"<b> –≤ —á–∞—Ç–µ</b> {msg}"
        self.db.set("Su", "su", self.su)
        await m.edit(txt)

    async def sncmd(self, m):
        """–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥, '.sn Name' (–∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–µ 2 —Å–∏–º–≤–æ–ª–æ–≤)"""
        if len(m.text) < 4:
            await m.edit("üêñ–ø–∏—à–∏ <code>.sn Name</code>\n –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ —Å–ª–æ–≤–æ")
        msg = m.text.split(" ", 1)[1]
        self.su["name"] = msg.casefold()
        txt = f"üëª <code>{self.su['name']}</code> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω"
        self.db.set("Su", "su", self.su)
        await m.edit(txt)

    async def sucmd(self, m):
        """—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, .su ID –∏–ª–∏ —Ä–µ–ø–ª–∞–π"""
        reply = await m.get_reply_message()
        if len(m.text) < 9 and not reply:
            txt = "Users:"
            for i in self.su["users"]:
                txt += f"\n<a href='tg://user?id={i}'>{i}</a>"
            return await m.edit(txt)
        msg = reply.sender_id if reply else int(m.text.split(" ", 1)[1])
        if msg in self.su["users"]:
            self.su["users"].remove(msg)
            txt = f"üñïüèæ {msg} <b>—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>"
        else:
            self.su["users"].append(msg)
            txt = f"ü§ôüèæ {msg} <b>—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>"
        self.db.set("Su", "su", self.su)
        await m.edit(txt)

    async def watcher(self, m):
        """–∞–ª–∫–æ"""
        ct = datetime.datetime.now()
        n = (
            (self.me.id % 100) + 7
            if (self.me.id % 100) < 33
            else int(self.me.id % 100 / 3)
        )
        try:
            if (
                isinstance(m, Message)
                and m.sender_id in self.su["users"]
                and " " in m.text
                and (
                    m.text.casefold().startswith(self.su["name"])
                    or m.text.startswith(f"@{self.me.username}")
                    or str(self.me.id) in m.text
                )
            ):
                chat = m.peer_id
                reply = await m.get_reply_message()
                if "—Ö–æ–¥: " in m.text and m.buttons:
                    await asyncio.sleep(random.randint(3, n))
                    await m.click()
                elif "–Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏–∏" in m.text and m.buttons:
                    await asyncio.sleep(random.randint(3, n))
                    await m.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                elif "—Å–ª–æ–º–∞–ª–æ—Å—å" in m.text:
                    await asyncio.sleep(random.randint(3, n))
                    txt = (
                        "–∫–ª—é–≤ —Ü–∞–ø–ª–∏",
                        "–±—É–∫–∞—à–∫–æ–º–µ—Ç",
                        "–Ω–∞–≥–æ–ª–æ–≤–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
                        "–Ω–∞–≥—Ä—É–¥–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
                        "–Ω–∞–ª–∞–ø–Ω–∏–∫–∏ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
                    )
                    for i in txt:
                        await m.respond(f"—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å {i}")
                elif "–ë–∞–Ω–¥–∞ –ø–æ–ª—É—á–∏–ª–∞" in m.text:
                    await asyncio.sleep(random.randint(3, n))
                    await m.respond("–æ—Ç–¥–∞—Ç—å –ª–µ–¥–µ–Ω–µ—Ü")
                    await asyncio.sleep(random.randint(3, n))
                    cmn = "–º–æ—è –±–∞–Ω–¥–∞"
                    await self.err(chat, cmn)
                    if not RSP and "üìø" not in RSP.text:
                        return
                    if "–ö—É–ª–æ–Ω: –ü—É—Å—Ç–æ" in RSP.text:
                        await asyncio.sleep(random.randint(3, n))
                        await m.respond("—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫—É–ª–æ–Ω –±—Ä–∞—Ç–≤—ã")
                elif "—Ç—ã–∫–ø—ã—Ö" in m.text:
                    if reply:
                        return await reply.click()
                    if "—Ç—ã–∫–ø—ã—Ö " not in m.text:
                        return
                    reg = re.search(r"/(\d+)/(\d+)", m.text)
                    if not reg:
                        return
                    msg = await self.client.get_messages(
                        int(reg.group(1)), ids=int(reg.group(2))
                    )
                    await msg.click()
                elif "–±—É–∫–∞—Ö" in m.text and self.su["name"] in ("–∫—É—à–∫–∏", "–∞–ª—å–±–µ—Ä—Ç"):
                    await asyncio.sleep(
                        random.randint(n + ct.minute, 111 + (ct.microsecond % 100))
                    )
                    cmn = "–º–æ–π –±–∞–ª–∞–Ω—Å"
                    await self.err(chat, cmn)
                    if not RSP:
                        return
                    if "–£ —Ç–µ–±—è" in RSP.text:
                        await m.respond("–≤–∑—è—Ç—å –∂–∞–±—É")
                    elif "–ë–∞–ª–∞–Ω—Å" not in RSP.text:
                        return
                    jab = int(re.search(r"–∂–∞–±—ã: (\d+)", RSP.text).group(1))
                    if jab < 50:
                        return
                    await m.reply(f"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É–∫–∞—à–∫–∏ {jab}")
                elif "del" in m.text:
                    chat = 1124824021
                    cmn = "–º–æ–∏ –∂–∞–±—ã"
                    await self.err(chat, cmn)
                    if not RSP:
                        return
                    await self.client.delete_dialog(chat, revoke=True)
                    for i in re.findall(r"(-\d+)", RSP.text):
                        chat = int(i)
                        async for msg in self.client.iter_messages(
                            chat, from_user="me"
                        ):
                            await msg.delete()
                elif "–Ω–∞–ø–∏—à–∏ –≤ " in m.text:
                    chat = m.text.split(" ", 4)[3]
                    if chat.isnumeric():
                        chat = int(chat)
                    if reply:
                        msg = reply
                    else:
                        msg = m.text.split(" ", 4)[4]
                    await self.client.send_message(chat, msg)
                elif "–Ω–∞–ø–∏—à–∏ " in m.text:
                    txt = m.text.split(" ", 2)[2]
                    if reply:
                        return await reply.reply(txt)
                    await m.respond(txt)
                else:
                    cmn = m.text.split(" ", 2)[1]
                    if reply and cmn in ("–ª–µ–¥–∏–∫", "–∞–ø—Ç–µ–∫", "–±—É–∫–∞—Ö"):
                        return await reply.reply(
                            f"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å {self.ded[cmn]} {m.text.split(' ', 2)[2]}"
                        )
                    msg = m.text.split(" ", 2)[1]
                    if msg not in self.ded:
                        return
                    if msg in ("–Ω–∞–ø–∞–¥–∏", "–∞—Ä–µ–Ω–∞"):
                        return await self.npn(chat, msg)
                    if msg in ("–∫–∞—Ä—Ç—É", "–ª–∏–¥–µ—Ä–∫—É"):
                        return await m.reply(self.ded[msg])
                    await asyncio.sleep(random.randint(3, n))
                    await m.respond(self.ded[msg])
            if (
                "auto" not in self.su
                and "chats" not in self.su
                or (ct.minute not in (n + 3, n + 21))
            ):
                return
            await asyncio.sleep(
                random.randint(ct.hour * 3, 99 + (ct.microsecond % 100))
            )
            if "minute" in self.su and (-1 < (ct.minute - self.su["minute"]) < 1):
                return
            if "minute" in self.su:
                self.su["minute"] = ct.minute
            else:
                self.su.setdefault("minute", ct.minute)
            self.db.set("Su", "su", self.su)
            chat = 1124824021
            cmn = "–º–æ–∏ –∂–∞–±—ã"
            await self.err(chat, cmn)
            if not RSP:
                return
            await self.client.delete_dialog(chat, revoke=True)
            for i in re.findall(r"(\d+) \| (-\d+)", RSP.text):
                chat = int(i[1])
                if "chats" in self.su and chat not in self.su["chats"]:
                    continue
                if "cs" in self.su or ("css" in self.su and chat in self.su["css"]):
                    job = "—Ä–∞–±–æ—Ç–∞ –∫—Ä—É–ø—å–µ"
                elif "ss" in self.su or ("sss" in self.su and chat in self.su["css"]):
                    job = "–ø–æ—Ö–æ–¥ –≤ —Å—Ç–æ–ª–æ–≤—É—é"
                elif "es" in self.su or ("ess" in self.su and chat in self.su["css"]):
                    job = "—Ä–∞–±–æ—Ç–∞ –≥—Ä–∞–±–∏—Ç–µ–ª—å"
                else:
                    job = None
                try:
                    cmn = "–ú–æ—è –∂–∞–±–∞"
                    await self.err(chat, cmn)
                except Exception:
                    continue
                if not RSP and "–ò–º—è –∂–∞–±—ã" not in RSP.text:
                    continue
                s = "alive"
                if "–ù—É–∂–Ω–∞ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è" in RSP.text:
                    s = "dead"
                if "–•–æ—Ä–æ—à–µ–µ" in RSP.text:
                    await asyncio.sleep(
                        random.randint(n + ct.minute, 111 + (ct.microsecond % 100))
                    )
                    await RSP.respond(f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–¥–µ–Ω—Ü—ã {random.randint(1, 3)}")
                jab = re.search(r"–ë.+: (\d+)", RSP.text)
                if not jab:
                    continue
                await asyncio.sleep(random.randint(3, n))
                cmn = "@toadbot –ñ–∞–±–∞ –∏–Ω—Ñ–æ"
                await self.err(chat, cmn)
                if not RSP and "üèÉ‚Äç‚ôÇÔ∏è" not in RSP.text:
                    continue
                for p in (p for p in self.ded if p in RSP.text):
                    if (
                        (
                            p == "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
                            and job == None
                            and "cs" not in self.su
                            and "css" not in self.su
                            and "ss" not in self.su
                            and "sss" not in self.su
                            and "es" not in self.su
                            and "ess" not in self.su
                        )
                        or (
                            p == "–ú–æ–∂–Ω–æ –Ω–∞ –∞—Ä–µ–Ω—É!"
                            and (
                                "buto" not in self.su
                                or ("butos" in self.su and chat not in self.su["butos"])
                            )
                        )
                        or (
                            (
                                int(i[0]) < 77
                                or (int(i[0]) > 77 and int(jab.group(1)) < 1500)
                            )
                            and p in ("–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å", "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è")
                        )
                        or (
                            (int(i[0]) > 77 and int(jab.group(1)) > 1500)
                            and p == "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
                            and "–ø–æ–¥–∑–µ–º–µ–ª—å–µ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 2" not in RSP.text
                        )
                    ):
                        continue
                    if (
                        s == "dead"
                        and job != "–ø–æ—Ö–æ–¥ –≤ —Å—Ç–æ–ª–æ–≤—É—é"
                        and job == None
                        and p not in ("–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å", "–º–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å")
                    ):
                        await asyncio.sleep(random.randint(3, n))
                        await RSP.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                    if p == "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å":
                        return await RSP.respond(job)
                    await asyncio.sleep(random.randint(3, n))
                    await RSP.respond(self.ded[p])
                if int(i[0]) < 77 or "–Ω–µ –≤ –±—Ä–∞–∫–µ" in RSP.text:
                    continue
                await asyncio.sleep(random.randint(3, n))
                cmn = "–ú–æ—è —Å–µ–º—å—è"
                await self.err(chat, cmn)
                if not RSP:
                    continue
                if "–£ –≤–∞—Å –Ω–µ—Ç" in RSP.text:
                    continue
                if not RSP.buttons:
                    continue
                s = len(RSP.buttons)
                await asyncio.sleep(random.randint(3, n))
                await RSP.respond(self.ded[RSP.buttons[0][0].text])
                if s == 1:
                    continue
                await asyncio.sleep(random.randint(3, n))
                await RSP.respond(self.ded[RSP.buttons[1][0].text])
                if s == 2:
                    continue
                await asyncio.sleep(random.randint(3, n))
                await RSP.respond(self.ded[RSP.buttons[2][0].text])
        except Exception:
            return

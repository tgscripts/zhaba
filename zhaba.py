import asyncio
import datetime
import random
import re

from telethon.tl.types import Message

from .. import loader


@loader.tds
class ZhabaMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è @toadbot"""

    strings = {"name": "Zhaba"}

    async def client_ready(self, client, db):
        """ready"""
        self.client = client
        self.db = db
        self.su = db.get("Su", "su", {})
        self.me = await client.get_me()
        if "name" not in self.su:
            self.su.setdefault("name", self.me.first_name)
            self.su.setdefault("users", [1124824021, self.me.id, 1785723159])
            self.db.set("Su", "su", self.su)
        self.ded = {
            "–∞–ø—Ç–µ–∫–∏": "–∞–ø—Ç–µ—á–∫–∏",
            "–∞—Ä–µ–Ω–∞": "–ù–∞ –∞—Ä–µ–Ω—É",
            "–ª–µ–¥–∏–∫–∏": "–ª–µ–¥–µ–Ω—Ü—ã",
            "–±—É–∫–∞—Ö–∏": "–±—É–∫–∞—à–∫–∏",
            "—Ä–µ–π–¥": "–†–µ–π–¥ —Å—Ç–∞—Ä—Ç",
            "—Ç—É—Å–∏": "–ù–∞—á–∞—Ç—å —Ç—É—Å—É",
            "—Ç—É—Å–∞": "–ñ–∞–±—É –Ω–∞ —Ç—É—Å—É",
            "–∫–∞—Ä—Ç—É": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É",
            "–ª–∏–¥–µ—Ä–∫—É": "–ü–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞–Ω",
            "–ª–µ–¥–µ–Ω–µ—Ü": "–û—Ç–¥–∞—Ç—å –ª–µ–¥–µ–Ω–µ—Ü",
            "–Ω–∞–ø–∞–¥–∏": "–ù–∞–ø–∞—Å—Ç—å –Ω–∞ –∫–ª–∞–Ω",
            "—Å–Ω–∞—Ä—è–≥–∞": "–ú–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ",
            "—Ä–∞–±–æ—Ç–∞": "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            "–ë–∞–Ω–¥–∞: –ü—É—Å—Ç–æ": "–≤–∑—è—Ç—å –∂–∞–±—É",
            "–∂–∞–±–∞ –≤ –¥–∞–Ω–∂–µ": "–†–µ–π–¥ —Å—Ç–∞—Ä—Ç",
            "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å": "–ú–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
            "–∫–≤": "–ù–∞—á–∞—Ç—å –∫–ª–∞–Ω–æ–≤—É—é –≤–æ–π–Ω—É",
            "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å": "–†–∞–±–æ—Ç–∞ –∫—Ä—É–ø—å–µ",
            "—Ä–µ–∞–Ω–∏–º–∏—Ä—É–π": "–†–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É",
            "–∫—É–ª–æ–Ω–∏–∫": "–°–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫—É–ª–æ–Ω –±—Ä–∞—Ç–≤—ã",
            "–ú–æ–∂–Ω–æ –Ω–∞ –∞—Ä–µ–Ω—É!": "@toadbot –ù–∞ –∞—Ä–µ–Ω—É",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ç–∞–∫—É": "@toadbot –ù–∞ –∞—Ä–µ–Ω—É",
            "–ø—Ä–µ–¥–µ–ª—è": "–í—ã–±—Ä–∞—Ç—å —É—Å–∏–ª–∏—Ç–µ–ª—å –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ",
            "–∑–æ–ª–æ—Ç–æ": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
            "—Ä–æ–¥–∏—Ç–µ–ª—è": "–í—ã–±—Ä–∞—Ç—å —É—Å–∏–ª–∏—Ç–µ–ª—å –†–æ–¥–∏—Ç–µ–ª—å –≥–æ–¥–∞",
            "–î–∞–ª—å–Ω–∏–π –±–æ–π: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—É–∫–∞—à–∫–æ–º–µ—Ç",
            "–∂–∞–±—É —Å —Ä–∞–±–æ—Ç—ã": "@toadbot –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É",
            "–ó–∞–±—Ä–∞—Ç—å –∂–∞–±–µ–Ω–∫–∞": "@toadbot –ó–∞–±—Ä–∞—Ç—å –∂–∞–±–µ–Ω–∫–∞",
            "–ë–ª–∏–∂–Ω–∏–π –±–æ–π: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫–ª—é–≤ —Ü–∞–ø–ª–∏",
            "–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–æ": "–í—ã–±—Ä–∞—Ç—å —É—Å–∏–ª–∏—Ç–µ–ª—å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç",
            "–º–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å": "@toadbot –ü–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±—É",
            "–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å": "@toadbot –û—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±—É",
            "–ü–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞": "@toadbot –ü–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞",
            "–ë—Ä–∞–∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ": "@toadbot –ë—Ä–∞–∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ",
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ",
            "–í –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥!": "@toadbot –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –≤ –¥–µ—Ç—Å–∞–¥",
            "–ù–∞–≥—Ä—É–¥–Ω–∏–∫: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–¥–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
            "–ù–∞–ª–∞–ø–Ω–∏–∫–∏: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–ª–∞–ø–Ω–∏–∫–∏ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
            "–ù–∞–≥–æ–ª–æ–≤–Ω–∏–∫: –ü—É—Å—Ç–æ": "—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –Ω–∞–≥–æ–ª–æ–≤–Ω–∏–∫ –∏–∑ –∫–ª—é–≤–∞ —Ü–∞–ø–ª–∏",
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ö–∞—á": "@toadbot –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±–µ–Ω–∫–∞ –Ω–∞ –º–∞—Ö–∞—á",
        }

    async def err(self, chat, cmn):
        """—Ä–∞–±–æ—Ç–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –∂–∞–±–∞–±–æ—Ç–∞"""
        try:
            async with self.client.conversation(chat, exclusive=False) as conv:
                await conv.send_message(cmn)
                global RSP
                RSP = await conv.get_response()
                await conv.cancel_all()
        except Exception:
            pass

    async def scmd(self, m):
        """—Å—Ç–∞—Ç—É—Å —é–∑–µ—Ä–±–æ—Ç–∞"""
        ub = (
            "<b>–°—Ç–∞—Ç—É—Å",
            "auto",
            " üü¢",
            " ‚≠êÔ∏è",
            "\n‚îú",
            "\n‚îÅ",
            " ‚õîÔ∏è",
            "<b>üëëUserbot:</b>",
        )
        ar = (
            "\n\n    ‚Ä¢ –ê—Ä–µ–Ω–∞:",
            "bs",
            " üü¢",
            " ‚≠êÔ∏è",
            "\n       ‚îú",
            "\n        ‚îÅ",
            " ‚õîÔ∏è",
            "<b>ü§∫–ê—Ä–µ–Ω–∞:</b>",
        )
        fm = (
            "\n    ‚Ä¢ –°–µ–º—å—è:",
            "hs",
            " üü¢",
            " ‚≠êÔ∏è",
            "\n       ‚îú",
            "\n        ‚îÅ",
            " ‚õîÔ∏è",
            "<b>üë®‚Äçüë©‚Äçüëß‚Äçüë¶–°–µ–º—å—è:</b>",
        )
        ok = (
            "\n    ‚Ä¢ –û—Ç–∫–æ—Ä–º–∏—Ç—å:",
            "gs",
            " üü¢",
            " ‚≠êÔ∏è",
            "\n       ‚îú",
            "\n        ‚îÅ",
            " ‚õîÔ∏è",
            "<b>ü§∞üèΩ–û—Ç–∫–æ—Ä–º–∏—Ç—å:</b>",
        )
        pz = (
            "\n    ‚Ä¢ –ü–æ–¥–∑–µ–º–µ–ª—å–µ:",
            "fs",
            " üü¢",
            " ‚≠êÔ∏è",
            "\n       ‚îú",
            "\n        ‚îÅ",
            " ‚õîÔ∏è",
            "<b>ü¶π‚Äç‚ôÄÔ∏è–ü–æ–¥–∑–µ–º–µ–ª—å–µ:</b>",
        )
        sn = (
            "\n    ‚Ä¢ –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:",
            "as",
            " üü¢",
            " ‚≠êÔ∏è",
            "\n       ‚îú",
            "\n        ‚îÅ",
            " ‚õîÔ∏è",
            "<b>‚öîÔ∏è–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:</b>",
        )
        jk = (
            "\n    üé∞–ö—Ä—É–ø—å–µ:",
            "cs",
            " üü¢",
            " ‚≠êÔ∏è",
            "\n       ‚îú",
            "\n        ‚îÅ",
            " ‚õîÔ∏è",
            "<b>üé∞–ö—Ä—É–ø—å–µ:</b>",
        )
        jg = (
            "\n\n    üí∂–ì—Ä–∞–±–∏—Ç–µ–ª—å:",
            "es",
            " üü¢",
            " ‚≠êÔ∏è",
            "\n       ‚îú",
            "\n        ‚îÅ",
            " ‚õîÔ∏è",
            "<b>üí∂–ì—Ä–∞–±–∏—Ç–µ–ª—å:</b>",
        )
        js = (
            "\n    üçΩ–°—Ç–æ–ª–æ–≤–∞—è:",
            "ss",
            " üü¢",
            " ‚≠êÔ∏è",
            "\n       ‚îú",
            "\n        ‚îÅ",
            " ‚õîÔ∏è",
            "<b>üçΩ–°—Ç–æ–ª–æ–≤–∞—è:</b>",
        )
        if len(m.text) < 3:
            ede = (ub, ar, ok, pz, sn, fm, jg, jk, js)
            txt = ""
            for i in ede:
                txt += i[0]
                if "auto" not in self.su:
                    txt += i[6]
                    continue
                if i[1] in self.su and self.su[i[1]] == []:
                    txt += i[2]
                elif i[1] in self.su:
                    txt += i[3]
                    for p in self.su[i[1]]:
                        txt += i[4] + f" <code>{p}</code>"
                    txt += i[5]
                else:
                    txt += i[6]
            msg = "‚õîÔ∏è" if "auto" not in self.su and "chats" not in self.su else "üü¢"
            txt += f"\n\n–ù–∏–∫: <code>{self.su['name']}</code>"
            txt += f"\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {msg}"
            txt += f"\n–•–æ–¥ –≤ –ø–æ—Ö–æ–¥–µ: {msg}"
            txt += "\n\n<a href='te.legra.ph/-06-20-999'>@–≥–∞–π–¥</a>\n@jabuser"
            return await m.edit(txt)
        cmn = m.text.split(" ", 2)[1]
        if cmn == "su":
            reply = await m.get_reply_message()
            if len(m.text) < 13 and not reply:
                txt = "–î–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n"
                for i in self.su["users"]:
                    if i in (1124824021, self.me.id):
                        continue
                    txt += f"\n<a href='tg://user?id={i}'>{i}</a>"
                txt += "\n\n(<code>.s su</code> ID –∏–ª–∏ —Ä–µ–ø–ª–∞–π)"
                return await m.edit(txt)
            msg = reply.sender_id if reply else int(m.text.split(" ", 2)[2])
            if msg in (1124824021, self.me.id):
                txt = "üóø<b>–Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å</b>"
            elif msg in self.su["users"]:
                self.su["users"].remove(msg)
                txt = f"üñïüèæ {msg} <b>—É–¥–∞–ª–µ–Ω</b>"
            else:
                self.su["users"].append(msg)
                txt = f"ü§ôüèæ {msg} <b>–¥–æ–±–∞–≤–ª–µ–Ω</b>"
            self.db.set("Su", "su", self.su)
            return await m.edit(txt)
        if cmn == "nn":
            if len(m.text) < 9:
                return await m.edit(
                    "üêñ <code>.s nn –ù–∏–∫</code>\n–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–µ 2 –±—É–∫–≤"
                )
            msg = m.text.split(" ", 2)[2]
            self.su["name"] = msg.casefold()
            txt = f"üëª <code>{self.su['name']}</code> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω"
            self.db.set("Su", "su", self.su)
            return await m.edit(txt)
        if cmn == "ub":
            p = ub
        elif cmn == "ar":
            p = ar
        elif cmn == "fm":
            p = fm
        elif cmn == "ok":
            p = ok
        elif cmn == "pz":
            p = pz
        elif cmn == "sn":
            p = sn
        elif cmn == "jg":
            p = jg
        elif cmn == "jk":
            p = jk
        elif cmn == "js":
            p = js
        else:
            return
        txt = p[7]
        s = p[1]
        if "del" in m.text:
            if "ub del+" in m.text:
                self.su.clear()
                self.su.setdefault("name", self.me.first_name)
                self.su.setdefault("users", [1124824021, self.me.id, 1785723159])
                self.db.set("Su", "su", self.su)
                return await m.edit("üõë–¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ãüõë")
            if s in self.su:
                self.su.pop(s)
            txt += " ‚õî"
            return await m.edit(txt)
        if "all" in m.text:
            if s in self.su and self.su[s] == []:
                self.su.pop(s)
                txt += " ‚õî"
            elif s in self.su:
                self.su[s].clear()
                txt += " üü¢"
            else:
                self.su.setdefault(s, [])
                txt += " üü¢"
            return await m.edit(txt)
        msg = m.chat_id if len(m.text) < 9 else int(m.text.split(" ", 2)[2])
        if "-" not in str(msg):
            return await m.edit("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–¥\n–Ω–∞–ø–∏—à–∏ <code>–£–∑–Ω–∞—Ç—å –∏–¥</code>")
        if s in self.su and msg in self.su[s]:
            self.su[s].remove(msg)
            txt += f"<b> —É–¥–∞–ª–µ–Ω</b> {msg}"
            if self.su[s] == []:
                self.su.pop(s)
            return await m.edit(txt)
        if s in self.su:
            txt += f"<b> –¥–æ–±–∞–≤–ª–µ–Ω</b> {msg}"
            self.su[s].append(msg)
        else:
            self.su.setdefault(s, [msg])
            txt += f"<b> –¥–æ–±–∞–≤–ª–µ–Ω</b> {msg}"
        self.db.set("Su", "su", self.su)
        await m.edit(txt)

    async def watcher(self, m):
        """–∞–ª–∫–æ"""
        if "auto" not in self.su:
            return
        ct = datetime.datetime.now()
        n = self.me.id % 100 if (self.me.id % 100) < 48 else int(self.me.id % 100 / 3)
        n = n + ct.hour if ct.hour < 12 else n + ct.hour - 11
        if (
            isinstance(m, Message)
            and (
                "auto" in self.su
                and (m.chat_id in self.su["auto"] or self.su["auto"] == [])
            )
            and m.sender_id in self.su["users"]
            and " " in m.text
            and (
                m.text.casefold().startswith(self.su["name"])
                or m.text.startswith(f"@{self.me.username}")
                or str(self.me.id) in m.text
            )
        ):
            await asyncio.sleep(random.randint(3, n + 7))
            chat = m.chat_id
            reply = await m.get_reply_message()
            cn = (
                0
                if "as" not in self.su
                or (self.su["as"] != [] and chat not in self.su["as"])
                else 1
            )
            if "–Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏–∏" in m.text and m.buttons:
                await m.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
                await asyncio.sleep(random.randint(3, n + 3))
                await m.click()
            elif "—Ö–æ–¥: " in m.text and m.buttons:
                await m.click()
            elif "—Å–ª–æ–º–∞–ª–æ—Å—å" in m.text and cn == 1:
                cmn = "–º–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ"
                await self.err(chat, cmn)
                if not RSP and "üó°" not in RSP.text:
                    return
                for i in (i for i in self.ded if i in RSP.text):
                    await asyncio.sleep(random.randint(3, n + 3))
                    await m.respond(self.ded[i])
            elif "–ë–∞–Ω–¥–∞ –ø–æ–ª—É—á–∏–ª–∞" in m.text and cn == 1:
                await m.respond("–æ—Ç–¥–∞—Ç—å –ª–µ–¥–µ–Ω–µ—Ü")
                await asyncio.sleep(random.randint(3, n + 3))
                cmn = "–º–æ—è –±–∞–Ω–¥–∞"
                await self.err(chat, cmn)
                if not RSP and "üìø" not in RSP.text:
                    return
                if "–ö—É–ª–æ–Ω: –ü—É—Å—Ç–æ" in RSP.text:
                    await asyncio.sleep(random.randint(3, n + 3))
                    await m.respond("—Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∫—É–ª–æ–Ω –±—Ä–∞—Ç–≤—ã")
            elif "—Ç—ã–∫–ø—ã—Ö" in m.text:
                if reply:
                    return await reply.click()
                if "—Ç—ã–∫–ø—ã—Ö " not in m.text:
                    return
                reg = re.search(r"/(\d+)/(\d+)", m.text)
                if not reg:
                    return
                msg = await self.client.get_messages(
                    int(reg.group(1)), ids=int(reg.group(2))
                )
                await msg.click()
            elif "–±—É–∫–∞—Ö" in m.text and self.su["name"] in ("–∫—É—à–∫–∏", "–∞–ª—å–±–µ—Ä—Ç"):
                await asyncio.sleep(random.randint(n, 96 + (ct.microsecond % 100)))
                cmn = "–º–æ–π –±–∞–ª–∞–Ω—Å"
                await self.err(chat, cmn)
                if not RSP:
                    return
                if "–£ —Ç–µ–±—è" in RSP.text:
                    await m.respond("–≤–∑—è—Ç—å –∂–∞–±—É")
                elif "–ë–∞–ª–∞–Ω—Å" not in RSP.text:
                    return
                jab = int(re.search(r"–∂–∞–±—ã: (\d+)", RSP.text).group(1))
                if jab < 50:
                    return
                await m.reply(f"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—É–∫–∞—à–∫–∏ {jab}")
            elif "–Ω–∞–ø–∏—à–∏ –≤ " in m.text:
                chat = m.text.split(" ", 4)[3]
                if chat.isnumeric():
                    chat = int(chat)
                if reply:
                    msg = reply
                else:
                    msg = m.text.split(" ", 4)[4]
                    if msg not in self.ded:
                        return await self.client.send_message(chat, msg)
                    return await self.client.send_message(chat, self.ded[msg])
                await self.client.send_message(chat, msg)
            elif "–Ω–∞–ø–∏—à–∏ " in m.text:
                txt = m.text.split(" ", 2)[2]
                if reply:
                    return await reply.reply(txt)
                await m.respond(txt)
            else:
                cmn = m.text.split(" ", 2)[1]
                if reply and cmn in ("–ª–µ–¥–∏–∫–∏", "–∞–ø—Ç–µ–∫–∏", "–±—É–∫–∞—Ö–∏"):
                    return await reply.reply(
                        f"–æ—Ç–ø—Ä–∞–≤–∏—Ç—å {self.ded[cmn]} {m.text.split(' ', 2)[2]}"
                    )
                msg = m.text.split(" ", 2)[1]
                if msg not in self.ded:
                    return
                if msg in ("–∫–∞—Ä—Ç—É", "–ª–∏–¥–µ—Ä–∫—É"):
                    return await m.reply(self.ded[msg])
                await asyncio.sleep(random.randint(3, n + 3) + ct.minute)
                await m.respond(self.ded[msg])
        if ct.minute != n:
            return
        await asyncio.sleep(random.randint(n, 96 + (ct.microsecond % 100)) + ct.minute)
        if "minute" not in self.su:
            self.su.setdefault("minute", ct.hour + ct.minute)
            self.db.set("Su", "su", self.su)
        if -1 < ((ct.hour + ct.minute) - self.su["minute"]) < 1:
            return
        self.su["minute"] = ct.hour + ct.minute
        self.db.set("Su", "su", self.su)
        chat = 1124824021
        cmn = "–º–æ–∏ –∂–∞–±—ã"
        await self.err(chat, cmn)
        await self.client.delete_dialog(chat, revoke=True)
        if not RSP:
            return
        for i in re.findall(r"‚Ä¢(.+) \|.+ (\d+) \| (-\d+)", RSP.text):
            await asyncio.sleep(
                random.randint(n + ct.hour, 96 + (ct.microsecond % 100)) + ct.minute
            )
            chat = int(i[2])
            if self.su["auto"] != [] and chat not in self.su["auto"]:
                continue
            ok = (
                0
                if "gs" not in self.su
                or (self.su["gs"] != [] and chat not in self.su["gs"])
                else 1
            )
            pz = (
                0
                if "fs" not in self.su
                or (self.su["fs"] != [] and chat not in self.su["fs"])
                else 1
            )
            fm = (
                0
                if "hs" not in self.su
                or (self.su["hs"] != [] and chat not in self.su["hs"])
                else 1
            )
            ar = (
                0
                if "bs" not in self.su
                or (self.su["bs"] != [] and chat not in self.su["bs"])
                else 1
            )
            if "cs" in self.su and chat in self.su["cs"]:
                job = "—Ä–∞–±–æ—Ç–∞ –∫—Ä—É–ø—å–µ"
            elif "es" in self.su and chat in self.su["es"]:
                job = "—Ä–∞–±–æ—Ç–∞ –≥—Ä–∞–±–∏—Ç–µ–ª—å"
            elif "ss" in self.su and chat in self.su["ss"]:
                job = "–ø–æ—Ö–æ–¥ –≤ —Å—Ç–æ–ª–æ–≤—É—é"
            elif "cs" in self.su and self.su["cs"] == []:
                job = "—Ä–∞–±–æ—Ç–∞ –∫—Ä—É–ø—å–µ"
            elif "es" in self.su and self.su["es"] == []:
                job = "—Ä–∞–±–æ—Ç–∞ –≥—Ä–∞–±–∏—Ç–µ–ª—å"
            elif "ss" in self.su and self.su["ss"] == []:
                job = "–ø–æ—Ö–æ–¥ –≤ —Å—Ç–æ–ª–æ–≤—É—é"
            else:
                job = 0
            try:
                cmn = "–ú–æ—è –∂–∞–±–∞"
                await self.err(chat, cmn)
            except Exception:
                pass
            if (
                "–ò–º—è –∂–∞–±—ã" not in RSP.text
                or i[0] not in RSP.text
                and i[1] not in RSP.text
            ):
                continue
            jab = re.search(r"–ë.+: (\d+)", RSP.text).group(1)
            s = 1 if "–ù—É–∂–Ω–∞ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è" in RSP.text else 0
            if "–•–æ—Ä–æ—à–µ–µ" in RSP.text:
                await asyncio.sleep(
                    random.randint(n, 96 + (ct.microsecond % 100)) + ct.minute
                )
                await RSP.respond(f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–¥–µ–Ω—Ü—ã {random.randint(1, 3)}")
            await asyncio.sleep(random.randint(3, n + 3) + ct.minute)
            cmn = "@toadbot –ñ–∞–±–∞ –∏–Ω—Ñ–æ"
            await self.err(chat, cmn)
            if (
                "üèÉ‚Äç‚ôÇÔ∏è" not in RSP.text
                and "–Ω–µ –≤ –±—Ä–∞–∫–µ" not in RSP.text
                and i[0] not in RSP.text
            ):
                continue
            if int(jab) < 1500:
                ar = 0
                ok = 0
                pz = 0
            if s == 1 and (
                (
                    "–º–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å" not in RSP.text
                    and "–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å" not in RSP.text
                )
                or ok == 0
            ):
                await asyncio.sleep(random.randint(3, n + 3) + ct.minute)
                await RSP.respond("—Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É")
            if "–ø–æ–¥–∑–µ–º–µ–ª—å–µ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 2" in RSP.text:
                pz = 0
            if "–Ω–µ –≤ –±—Ä–∞–∫–µ" in RSP.text:
                fm = 0
            for p in (p for p in self.ded if p in RSP.text):
                await asyncio.sleep(random.randint(3, n + 3) + ct.minute)
                if p == "–ú–æ–∂–Ω–æ –æ—Ç–∫–æ—Ä–º–∏—Ç—å" and ok == 0:
                    pass
                elif p == "–º–æ–∂–Ω–æ –ø–æ–∫–æ—Ä–º–∏—Ç—å" and ok == 1:
                    pass
                elif p == "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è" and pz == 0:
                    pass
                elif p == "–ú–æ–∂–Ω–æ –Ω–∞ –∞—Ä–µ–Ω—É!" and ar == 0:
                    pass
                elif p in ("–ú–æ–∂–Ω–æ –Ω–∞ –∞—Ä–µ–Ω—É!", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ç–∞–∫—É"):
                    s = 13
                    if ct.minute < 48:
                        await asyncio.sleep(random.randint(3, n + 3) + ct.minute)
                        await RSP.respond(self.ded[p])
                        if p != "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Ç–∞–∫—É":
                            return
                        await asyncio.sleep(random.randint(s, 33))
                        await RSP.respond(self.ded[p])
                    if ct.hour > 20:
                        return
                    await self.client.send_message(
                        chat,
                        "–†–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É",
                        schedule=datetime.timedelta(minutes=s),
                    )
                    for n in range(3):
                        s += 13
                        i = random.randint(13, s)
                        if (ct.minute + i) > 49:
                            i += ct.minute + 10
                        else:
                            i = 49 - ct.minute
                        await asyncio.sleep(random.randint(3, 13))
                        await self.client.send_message(
                            chat,
                            "–ù–∞ –∞—Ä–µ–Ω—É",
                            schedule=datetime.timedelta(minutes=i),
                        )
                    await self.client.send_message(
                        chat,
                        "–†–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É",
                        schedule=datetime.timedelta(minutes=i + 1),
                    )
                elif p == "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" and (job == 0 or pz == 1):
                    pass
                elif p == "–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" and pz == 0:
                    await RSP.respond(job)
                else:
                    await RSP.respond(self.ded[p])
            if fm == 0:
                continue
            await asyncio.sleep(random.randint(3, n + 3) + ct.minute)
            cmn = "–ú–æ—è —Å–µ–º—å—è"
            await self.err(chat, cmn)
            if not RSP.buttons or (
                "–¥–Ω–µ–π –≤ –±—Ä–∞–∫–µ" not in RSP.text and i[0] not in RSP.text
            ):
                continue
            s = len(RSP.buttons)
            await asyncio.sleep(random.randint(3, n + 3) + ct.minute)
            await RSP.respond(self.ded[RSP.buttons[0][0].text])
            if s == 1:
                continue
            await asyncio.sleep(random.randint(3, n + 3) + ct.minute)
            await RSP.respond(self.ded[RSP.buttons[1][0].text])
            if s == 2:
                continue
            await asyncio.sleep(random.randint(3, n + 3) + ct.minute)
            await RSP.respond(self.ded[RSP.buttons[2][0].text])
